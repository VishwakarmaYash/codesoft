import tkinter as tk
from tkinter import messagebox
import sqlite3

# === Database Setup ===
def init_db():
    conn = sqlite3.connect('contacts.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS contacts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            phone TEXT NOT NULL,
            email TEXT,
            address TEXT
        )
    ''')
    conn.commit()
    conn.close()

# === Backend Operations ===
def add_contact(name, phone, email, address):
    conn = sqlite3.connect('contacts.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO contacts (name, phone, email, address) VALUES (?, ?, ?, ?)', (name, phone, email, address))
    conn.commit()
    conn.close()

def get_contacts():
    conn = sqlite3.connect('contacts.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM contacts')
    contacts = cursor.fetchall()
    conn.close()
    return contacts

def search_contacts(keyword):
    conn = sqlite3.connect('contacts.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM contacts WHERE name LIKE ? OR phone LIKE ?', (f'%{keyword}%', f'%{keyword}%'))
    results = cursor.fetchall()
    conn.close()
    return results

def delete_contact(contact_id):
    conn = sqlite3.connect('contacts.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM contacts WHERE id = ?', (contact_id,))
    conn.commit()
    conn.close()

def update_contact(contact_id, name, phone, email, address):
    conn = sqlite3.connect('contacts.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE contacts
        SET name = ?, phone = ?, email = ?, address = ?
        WHERE id = ?
    ''', (name, phone, email, address, contact_id))
    conn.commit()
    conn.close()

# === GUI ===
def refresh_listbox(data=None):
    listbox.delete(0, tk.END)
    if data is None:
        data = get_contacts()
    for contact in data:
        listbox.insert(tk.END, f"{contact[0]} - {contact[1]} ({contact[2]})")

def on_add():
    if not name_var.get() or not phone_var.get():
        messagebox.showwarning("Input Error", "Name and phone are required.")
        return
    add_contact(name_var.get(), phone_var.get(), email_var.get(), address_var.get())
    clear_form()
    refresh_listbox()

def on_select(event):
    try:
        index = listbox.curselection()[0]
        selected = listbox.get(index)
        contact_id = int(selected.split(" - ")[0])
        for contact in get_contacts():
            if contact[0] == contact_id:
                selected_contact.set(contact_id)
                name_var.set(contact[1])
                phone_var.set(contact[2])
                email_var.set(contact[3])
                address_var.set(contact[4])
                break
    except:
        pass

def on_update():
    if selected_contact.get() == 0:
        messagebox.showinfo("No Contact Selected", "Please select a contact to update.")
        return
    update_contact(selected_contact.get(), name_var.get(), phone_var.get(), email_var.get(), address_var.get())
    clear_form()
    refresh_listbox()

def on_delete():
    if selected_contact.get() == 0:
        messagebox.showinfo("No Contact Selected", "Please select a contact to delete.")
        return
    delete_contact(selected_contact.get())
    clear_form()
    refresh_listbox()

def on_search():
    keyword = search_var.get()
    if not keyword:
        refresh_listbox()
    else:
        results = search_contacts(keyword)
        refresh_listbox(results)

def clear_form():
    name_var.set("")
    phone_var.set("")
    email_var.set("")
    address_var.set("")
    selected_contact.set(0)

# === Main Window ===
init_db()
root = tk.Tk()
root.title("ðŸ“’ Contact Book")
root.geometry("600x500")
root.config(bg="#eef")

# Variables
name_var = tk.StringVar()
phone_var = tk.StringVar()
email_var = tk.StringVar()
address_var = tk.StringVar()
search_var = tk.StringVar()
selected_contact = tk.IntVar(value=0)

# --- Layout ---
tk.Label(root, text="Contact Book", font=("Helvetica", 18, "bold"), bg="#eef").pack(pady=10)

form_frame = tk.Frame(root, bg="#eef")
form_frame.pack(pady=10)

tk.Label(form_frame, text="Name:", bg="#eef").grid(row=0, column=0, sticky="e")
tk.Entry(form_frame, textvariable=name_var).grid(row=0, column=1)

tk.Label(form_frame, text="Phone:", bg="#eef").grid(row=1, column=0, sticky="e")
tk.Entry(form_frame, textvariable=phone_var).grid(row=1, column=1)

tk.Label(form_frame, text="Email:", bg="#eef").grid(row=2, column=0, sticky="e")
tk.Entry(form_frame, textvariable=email_var).grid(row=2, column=1)

tk.Label(form_frame, text="Address:", bg="#eef").grid(row=3, column=0, sticky="e")
tk.Entry(form_frame, textvariable=address_var).grid(row=3, column=1)

btn_frame = tk.Frame(root, bg="#eef")
btn_frame.pack(pady=10)

tk.Button(btn_frame, text="Add", width=10, command=on_add).grid(row=0, column=0, padx=5)
tk.Button(btn_frame, text="Update", width=10, command=on_update).grid(row=0, column=1, padx=5)
tk.Button(btn_frame, text="Delete", width=10, command=on_delete).grid(row=0, column=2, padx=5)

tk.Label(root, text="Search:", bg="#eef").pack()
tk.Entry(root, textvariable=search_var).pack()
tk.Button(root, text="Search Contact", command=on_search).pack(pady=5)

listbox = tk.Listbox(root, height=10, width=60)
listbox.pack(pady=10)
listbox.bind('<<ListboxSelect>>', on_select)

refresh_listbox()

root.mainloop()
